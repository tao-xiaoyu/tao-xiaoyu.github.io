<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js笔记</title>
      <link href="/2022/02/25/node-bi-ji/"/>
      <url>/2022/02/25/node-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a><center>node.js</center></h1><h3 id="node的简介"><a href="#node的简介" class="headerlink" title="node的简介"></a><font color="red">node的简介</font></h3><p>node.js是一个基于Chrome V8引擎的JavaScript运行环境</p><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><p>1、基于Express框架（<a href="http://www.expressjs.com.cn),可以快速构建web应用/">http://www.expressjs.com.cn），可以快速构建web应用</a></p><p>2、基于Electron框架（<a href="https://electronjs.org),可以构建跨平台的桌面应用/">https://electronjs.org），可以构建跨平台的桌面应用</a></p><p>3、基于restify框架（<a href="http://restify.com),可以快速都贱api接口项目/">http://restify.com），可以快速都贱API接口项目</a></p><h3 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a><font color="red">fs文件系统模块</font></h3><h4 id="一、什么是fs文件系统模块"><a href="#一、什么是fs文件系统模块" class="headerlink" title="一、什么是fs文件系统模块"></a>一、什么是fs文件系统模块</h4><p>fs模块是node.js官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求</p><h5 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h5><ul><li><font color="deepskyblue">fs.readFile()</font>方法，用来读取指定文件中的内容</li><li><font color="deepskyblue">fs.writeFile()</font>方法，用来向指定的文件中写入内容</li></ul><h5 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h5><p>如果在JavaScript代码中，使用fs模块来操作文件，则需要使用如下的方式先导入它</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span></code></pre><h4 id="二、读取指定文件中的内容"><a href="#二、读取指定文件中的内容" class="headerlink" title="二、读取指定文件中的内容"></a>二、读取指定文件中的内容</h4><h5 id="1、fs-readFile-的语法格式"><a href="#1、fs-readFile-的语法格式" class="headerlink" title="1、fs.readFile()的语法格式"></a>1、fs.readFile()的语法格式</h5><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span> options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span></code></pre><p>【注】[]包起来的参数就是可选参数项</p><p>以utf8的编码格式，读取指定文件的内容，并打印err和dataStr的值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入fs模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用fs.readFile()方法读取文件</span>    <span class="token comment" spellcheck="true">// 参数1：读取文件的存放路径</span>    <span class="token comment" spellcheck="true">// 参数2：读取文件时候采用的编码格式，一般默认utf-8</span>    <span class="token comment" spellcheck="true">// 参数3：回调函数，拿到成功和失败的结果， err 和 dataStr</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打印失败的结果</span>    <span class="token comment" spellcheck="true">// 如果打印成功，err的值就为null。如果打印失败，err的值就为一个错误对象，dataStr的值就为undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// null</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'-------------------'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 打印成功的结果</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1.txt的内容</span><span class="token punctuation">}</span><span class="token punctuation">)</span>判断文件是否读取失败<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件读取失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件内容为'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="三、向指定的文件中写入内容"><a href="#三、向指定的文件中写入内容" class="headerlink" title="三、向指定的文件中写入内容"></a>三、向指定的文件中写入内容</h4><h5 id="1、fs-writeFile-的语法格式"><a href="#1、fs-writeFile-的语法格式" class="headerlink" title="1、fs.writeFile()的语法格式"></a>1、fs.writeFile()的语法格式</h5><p>使用fs.writeFile()方法，可以向指定的文件中写入内容，语法格式如下：</p><pre class=" language-js"><code class="language-js">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">,</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span></code></pre><ul><li>参数1：<font color="red">必选</font>参数，需要指定一个文件路径的字符串，表示文件的路径</li><li>参数2：<font color="red">必选</font>参数，表示要写入的内容。</li><li>参数3：可选参数，表示以什么格式写入文件内容，默认值是utf8</li><li>参数4：<font color="red">必选</font>参数，文件写入完成后的回调函数。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、导入fs文件系统模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2、调用fs.writeFile()方法，写入文件内容</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果文件写入成功，则err的值为null</span>    <span class="token comment" spellcheck="true">// 如果文件写入失败，则err的值是错误对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>判断文件是否写入失败<span class="token comment" spellcheck="true">// 引入fs文件系统模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 做判断</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'晓组织的带土最厉害'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入失败'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件写入成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>【注】小练习</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、导入文件系统模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2、读取文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/成绩.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 3、判断读取情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件读取失败'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 先把成绩的数据，按照空格进行分割</span>    <span class="token comment" spellcheck="true">// 循环分割后的数组，对每一项数据，进行字符串替换操作</span>    <span class="token comment" spellcheck="true">// 把新数组中的每一项进行合并，得到新的字符串</span>    <span class="token keyword">const</span> arrOld <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// console.log(arrOld);</span>    <span class="token keyword">const</span> arrNew <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    arrOld<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        arrNew<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(arrNew)</span>    <span class="token keyword">const</span> newStr <span class="token operator">=</span> arrNew<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(newStr)</span>    <span class="token comment" spellcheck="true">// 文件写入操作</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./files/成绩-ok.txt'</span><span class="token punctuation">,</span> newStr<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 文件写入判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入失败'</span><span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入成功'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><font color="crison"><strong>【注】路径问题</strong></font></p><p>只会在读取的文件路径前边拼接node执行文件时所在的目录，出现了路径拼接问题是因为使用了相对路径。</p><p><strong>1、</strong>用绝对路径就可以解决路径需要两个\进行分割，<strong>但是</strong>，他的移植性非常差，不利于维护。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'D:\\桌面\\学习\\正式学习\\013-node.js\\node基础\\files\\1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件成功，内容为'</span> <span class="token operator">+</span> dataStr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>2、__dirname表示当前文件所处的目录</strong>前边是英文状态下的两个下划线</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件成功，内容为'</span> <span class="token operator">+</span> dataStr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a><font color="red">path路径模块</font></h3><h4 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h4><p>path模块是node.js官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求</p><h5 id="方法：-1"><a href="#方法：-1" class="headerlink" title="方法："></a>方法：</h5><ul><li><font color="#0fa5e0">path.join()</font>方法，用来将多个路径片段拼接成一个完整的路径字符串</li><li><font color="#0fa5e0">path.basename()</font>方法，用来从路径字符串中，将文件名解析出来</li></ul><h5 id="使用：-1"><a href="#使用：-1" class="headerlink" title="使用："></a>使用：</h5><p>如果要在JavaScript代码中，使用path模块来处理路径，则需要使用以下的方式先导入它：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span></code></pre><h4 id="二、路径拼接"><a href="#二、路径拼接" class="headerlink" title="二、路径拼接"></a>二、路径拼接</h4><h5 id="1、path-join-的语法格式"><a href="#1、path-join-的语法格式" class="headerlink" title="1、path.join()的语法格式"></a>1、path.join()的语法格式</h5><p>使用path.join()方法，可以将多个路径片段拼接为完整的路径字符串，语法格式如下：</p><pre class=" language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>paths<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>参数解读：</p><ul><li>…paths  string类型路径片段的序列  返回值：string类型</li></ul><h5 id="2、path-join-的代码示例"><a href="#2、path-join-的代码示例" class="headerlink" title="2、path.join()的代码示例"></a>2、path.join()的代码示例</h5><p>使用path.join()方法，可以把多个路径片段拼接为完整的路径字符串：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token string">'/b/c'</span><span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'./d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出 \a\b\d\e  ../会抵消前一层目录</span><span class="token keyword">const</span> pathSr2 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./files/1.txt'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathSr2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//输出当前文件所处目录的\files\1.txt</span>fstat<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/files/1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>【注】凡是涉及到路径拼接的操作，都要使用path.join()方法进行处理。不要直接使用+进行字符串拼接</p><h4 id="三、获取路径中的文件名"><a href="#三、获取路径中的文件名" class="headerlink" title="三、获取路径中的文件名"></a>三、获取路径中的文件名</h4><h5 id="1、path-basename-的语法格式"><a href="#1、path-basename-的语法格式" class="headerlink" title="1、path.basename()的语法格式"></a>1、path.basename()的语法格式</h5><p>使用path.basename()方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名，语法格式如下：</p><pre class=" language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">,</span>ext<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>path string类型 必选参数，表示一个路径的字符串</li><li>ext string类型 可选参数，表示文件扩展名</li><li>返回值： string类型  表示路径中的最后一部分</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义文件的存放路径</span><span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">'/a/b/c/index.html'</span><span class="token keyword">const</span> fullName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// index.html</span><span class="token keyword">const</span> nameWitgoutExt <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'.html'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameWitgoutExt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// index</span></code></pre><h4 id="四、获取路径中的文件扩展名"><a href="#四、获取路径中的文件扩展名" class="headerlink" title="四、获取路径中的文件扩展名"></a>四、获取路径中的文件扩展名</h4><h5 id="1、path-extname-的语法格式"><a href="#1、path-extname-的语法格式" class="headerlink" title="1、path.extname()的语法格式"></a>1、path.extname()的语法格式</h5><p>使用path.extname()方法，可以获取路径中的扩展名部分，语法格式如下：</p><pre class=" language-js"><code class="language-js">path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span></code></pre><p>参数：path string类型  是文件的路径</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fpath <span class="token operator">=</span><span class="token string">'/a/b/c/index.html'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// .html</span></code></pre><h4 id="五、练习"><a href="#五、练习" class="headerlink" title="五、练习"></a>五、练习</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、导入需要的模块并创建正则表达式</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 匹配&lt;style>&lt;/style>标签的正则</span><span class="token comment" spellcheck="true">// 其中\s 表示空白字符； \S表示非空白字符； *表示匹配任意次数 \/是对/进行了转义</span><span class="token keyword">const</span> regStyle <span class="token operator">=</span> <span class="token regex">/&lt;style>[\s\S]*&lt;\/style>/</span><span class="token comment" spellcheck="true">// 匹配&lt;script>&lt;/script>标签的正则</span><span class="token keyword">const</span> regScript <span class="token operator">=</span> <span class="token regex">/&lt;script>[\s\S]*&lt;\/script>/</span><span class="token comment" spellcheck="true">// 2、使用fs模块读取需要被处理的html文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./files/043-滑动条.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取HTML文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 读取文件成功后，调用对应的三个方法，分别拆解出css，js，html文件</span>    <span class="token function">resolveHTML</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>    <span class="token function">resolveCSS</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>    <span class="token function">resolveJS</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">resolveCSS</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> r1 <span class="token operator">=</span> regStyle<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">const</span> newCSS <span class="token operator">=</span> r1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;style>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;/style>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./滑动条/index.css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newCSS<span class="token punctuation">,</span>  err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入css文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>code<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'css文件写入成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">resolveJS</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> r1 <span class="token operator">=</span> regScript<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">const</span> newJS <span class="token operator">=</span> r1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;script>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'&lt;/script>'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./滑动条/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newJS<span class="token punctuation">,</span>  err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入js文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>code<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'js文件写入成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">resolveHTML</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newHTML <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regStyle<span class="token punctuation">,</span> <span class="token string">'&lt;link rel="stylesheet" href="./index.css">'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regScript<span class="token punctuation">,</span> <span class="token string">'&lt;script src="./index.js">&lt;/script>'</span><span class="token punctuation">)</span>    fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./滑动条/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newHTML<span class="token punctuation">,</span>  err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入html文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>code<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'html文件写入成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>【注】</p><ol><li>fs.writeFile()方法只能用来创建文件，不能用来创建路径（不会创建文件夹）</li><li>重复调用fs.writeFile()写入同一个文件，新写入的内容会覆盖之前的旧内容</li></ol><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a><font color="red">http模块</font></h3><h4 id="一、定义-1"><a href="#一、定义-1" class="headerlink" title="一、定义"></a>一、定义</h4><p><font color="#0fa5e0">客户端：</font></p><p>在网路节点中，负责消费资源的电脑，叫做客户端</p><p><font color="#0fa5e0">服务器：</font></p><p>负责对外提供网络资源的电脑，叫做服务器</p><p><font color="red">http模块</font>是Node.js官方提供的、用来创建web服务器的模块。通过http模块提供<font color="#0fa5e0">http.createServer()</font>方法，就能方便的把一台普通的电脑，变成一台Web服务器，从而对外提供Web资源服务</p><h5 id="方法：-2"><a href="#方法：-2" class="headerlink" title="方法："></a>方法：</h5><p><font color="#0fa5e0">http.createServer()</font>方法，就能方便的把一台普通的电脑，变成一台Web服务器，从而对外提供Web资源服务</p><h5 id="使用：-2"><a href="#使用：-2" class="headerlink" title="使用："></a>使用：</h5><p>如果要希望使用http模块创建Web服务器，则需要先导入它：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span></code></pre><h4 id="二、进一步理解http模块的作用"><a href="#二、进一步理解http模块的作用" class="headerlink" title="二、进一步理解http模块的作用"></a>二、进一步理解http模块的作用</h4><p>服务器和普通电脑的区别在于，服务器上安装了web服务器软件，例如：IIS、Apache等。通过安装这些服务器软件，就能把一台普通的电脑变成一台web服务器。</p><p>在Node.js中，我们必须不需要使用IIS、Apache等这些第三方web服务器软件。因为我们可以基于Node.js提供的http模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供web服务。</p><h4 id="三、服务器相关的概念"><a href="#三、服务器相关的概念" class="headerlink" title="三、服务器相关的概念"></a>三、服务器相关的概念</h4><h4 id="1、IP地址"><a href="#1、IP地址" class="headerlink" title="1、IP地址"></a>1、IP地址</h4><p><font color="red">IP地址</font>就是互联网上每台计算机的唯一地址，因此IP地址具有唯一性，如果把“个人电脑”比作“一个电话”，那么“IP地址”就相当于“电话号码”，只有在知道对方IP地址的前提下，才能与对应的电脑之间进行数据通信</p><p>IP地址的格式：通常使用“<font color="#0fa5e0">点分十进制</font>”表示成（a.b.c.d)的形式，其中，a，b，c，d都是0~255之间的十进制整数。例如：用点分十进制表示的IP地址（192.168.1.1）</p><p>【注】</p><ol><li>互联网中每台Web服务器，都有自己的IP地址，例如：大家可以在Windows的终端中运行ping <a href="http://www.baidu.com命令,即可查看到百度服务器的ip地址/">www.baidu.com命令，即可查看到百度服务器的IP地址</a></li><li>在开发期间，自己的电脑既是一台服务器，也是一个客户端，为了方便测试，可以在自己的浏览器中输入<strong>设置的服务器ip地址</strong>（192.168.1.4）进行访问</li></ol><h5 id="2、域名和域名服务器"><a href="#2、域名和域名服务器" class="headerlink" title="2、域名和域名服务器"></a>2、域名和域名服务器</h5><p>尽管IP地址能够唯一的标记网络上的计算机，但IP地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套字符型的地址方案，即所谓的**<font color="red">域名（Domain Name）地址</font>**</p><p>IP和域名是一一对应的关系，这份对应关系存放在一种叫做<font color="red">域名服务器（DNS，Domain name server）</font>的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，**<font color="red">域名服务器就是提供IP地址和域名之间的转换服务的服务器。</font>**</p><p>【注】</p><ol><li>单纯的使用IP地址，互联网中的电脑也能够正常工作。但是有了域名的加持，能让互联网的世界变得更加方便</li><li>在开发测试期间，192.168.1.4（说的是自己电脑的IP）对应的域名是localhost，它们都代表我们自己的这台电脑，在使用效果上没有任何区别</li></ol><h5 id="3、端口号"><a href="#3、端口号" class="headerlink" title="3、端口号"></a>3、端口号</h5><p>计算机中的端口号，就像现实生活中的门牌号，外卖小哥可以在整栋大楼中找到你家，把外卖送到你手上</p><p>同样的道理，在一台电脑中，可以运行成百上千个web服务。每个web服务都对应一个唯一的端口号，客户端发来的网络请求，通过端口号，可以被准确的交给对应的web服务进行处理</p><p>【注】</p><ol><li>每一个端口号不能同时被多个web服务占用</li><li>在实际应用中，URL中的80端口可以被省略</li></ol><h4 id="四、创建最基本的web服务器"><a href="#四、创建最基本的web服务器" class="headerlink" title="四、创建最基本的web服务器"></a>四、创建最基本的web服务器</h4><h5 id="1、创建web服务器的基本步骤"><a href="#1、创建web服务器的基本步骤" class="headerlink" title="1、创建web服务器的基本步骤"></a>1、创建web服务器的基本步骤</h5><ol><li>导入http模块</li><li>创建web服务器实例</li><li>为服务器实例绑定**<font color="red">request</font>**事件，<font color="#06648a">监听客户端的请求</font>  on方法绑定事件</li><li>启动服务器   listen（端口号，回调函数）</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'欢迎访问我的服务器'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'80'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'本地服务器打开'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="2、req请求对象"><a href="#2、req请求对象" class="headerlink" title="2、req请求对象"></a>2、req请求对象</h5><p>只要服务器接收到了客户端的请求，就会调用通过**<font color="red">server.on()</font>**为服务器绑定的<font color="#06648a">request事件处理函数</font> 如果想在事件处理函数中，访问与客户端相关的数据或者属性，可以使用如下的方式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://192.168.1.4:8080'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="3、res响应对象"><a href="#3、res响应对象" class="headerlink" title="3、res响应对象"></a>3、res响应对象</h5><p>在服务器的request事件处理函数中，如果想访问与服务器相关的数据或者属性，可以使用如下的方式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> req<span class="token punctuation">.</span>method<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">----</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://192.168.1.4:8080'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="4、解决中文乱码问题"><a href="#4、解决中文乱码问题" class="headerlink" title="4、解决中文乱码问题"></a>4、解决中文乱码问题</h5><p>当调用res.end()方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`你请求的地址是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，请求的方式是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* server.onRequest = function(req, res){    res.end(`您请求的url是${req.url}，请求方式是${req.method}`)} */</span>  <span class="token comment" spellcheck="true">// 这种绑定还不行</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://192.168.1.4:80'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="五、根据不同的url响应不同的html内容"><a href="#五、根据不同的url响应不同的html内容" class="headerlink" title="五、根据不同的url响应不同的html内容"></a>五、根据不同的url响应不同的html内容</h4><h5 id="1、核心实现步骤"><a href="#1、核心实现步骤" class="headerlink" title="1、核心实现步骤"></a>1、核心实现步骤</h5><ol><li>获取请求的url地址</li><li>设置默认的响应内容为404 Not found</li><li>判断用户请求的是否为/或者/index.html首页</li><li>判断用户请求的是否为/about.html关于页面</li><li>设置Content-Type响应头，防止中文乱码</li><li>使用res.end()把内容响应给客户端</li></ol><h5 id="2、动态响应内容"><a href="#2、动态响应内容" class="headerlink" title="2、动态响应内容"></a>2、动态响应内容</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">'&lt;h1>404 Not found&lt;/h1>'</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span> <span class="token operator">||</span> url <span class="token operator">===</span> <span class="token string">'/index'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        content <span class="token operator">=</span> <span class="token string">'&lt;h1>首页&lt;/h1>'</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/about'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        content <span class="token operator">=</span> <span class="token string">'&lt;h1>关于页面&lt;/h1>'</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://192.168.1.4:8080'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="六、网页web服务练习"><a href="#六、网页web服务练习" class="headerlink" title="六、网页web服务练习"></a>六、网页web服务练习</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建服务器</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听web服务器的request事件</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取客户端请求的url地址</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    <span class="token comment" spellcheck="true">// 把请求的URL地址映射为具体文件的e存放路径</span>    <span class="token comment" spellcheck="true">// const fpath = path.join(__dirname, url)</span>    <span class="token comment" spellcheck="true">// 预定义空白的文件存放路径</span>    <span class="token keyword">let</span> fpath <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果请求地址是/，则手动指定文件的存放路径</span>        fpath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./hdt/index.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果请求的路径不为/,则动态拼接文件的存放路径</span>        fpath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./滑动条'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 读取文件</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 运行服务器</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://192.168.1.4:80'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://localhost:80'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a><font color="red">模块化</font></h3><h4 id="一、定义-2"><a href="#一、定义-2" class="headerlink" title="一、定义"></a>一、定义</h4><p>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元</p><p>编程领域的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块</p><p>把代码进行模块化拆分的好处：</p><ol><li>提高了代码的复用性</li><li>提高了代码的可维护性</li><li>可以实现按需加载</li></ol><h4 id="二、模块化规范"><a href="#二、模块化规范" class="headerlink" title="二、模块化规范"></a>二、模块化规范</h4><p>模块化规范就是对代码进行模块化的拆分与组合时，需要遵守的那些规则</p><p>例如：</p><ul><li>使用什么样的语法格式来引用模块</li><li>在模块中使用什么样的语法格式向外暴露成员</li></ul><p>模块化规范的好处：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p><h3 id="Node-js中的模块化"><a href="#Node-js中的模块化" class="headerlink" title="Node.js中的模块化"></a><font color="red">Node.js中的模块化</font></h3><h4 id="一、Node-js中模块的分类"><a href="#一、Node-js中模块的分类" class="headerlink" title="一、Node.js中模块的分类"></a>一、Node.js中模块的分类</h4><p>Node.js中根据模块来源的不同，将模块分为了3大类，分别是：</p><p><font color="red">内置模块</font>（内置模块是由Node.js官方提供的，例如fs、path、http等）</p><p><font color="red">自定义模块</font>（用户创建的每个.js文件，都是自定义模块）</p><p><font color="red">第三方模块</font>（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</p><h4 id="二、加载模块"><a href="#二、加载模块" class="headerlink" title="二、加载模块"></a>二、加载模块</h4><p>使用强大的require()方法，可以架子需要的内置模块、用户自定义模块、第三方模块进行使用。例如：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、加载内置的fs模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2、加载用户自定义模块</span><span class="token keyword">const</span> custom <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./custom.js'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ./custom.js是路径</span><span class="token comment" spellcheck="true">// 3、加载第三方模块</span><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span></code></pre><p>【注】使用require()方法加载其他模块时，会执行被加载模块中的代码。在使用require加载用户自定义模块期间，可以省略.js的后缀名</p><h4 id="三、Node-js中的模块作用域"><a href="#三、Node-js中的模块作用域" class="headerlink" title="三、Node.js中的模块作用域"></a>三、Node.js中的模块作用域</h4><h5 id="1、什么是模块作用域"><a href="#1、什么是模块作用域" class="headerlink" title="1、什么是模块作用域"></a>1、什么是模块作用域</h5><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</p><h5 id="2、模块作用域的好处"><a href="#2、模块作用域的好处" class="headerlink" title="2、模块作用域的好处"></a>2、模块作用域的好处</h5><p>防止了全局变量污染的问题</p><h4 id="四、向外共享模块作用域的成员"><a href="#四、向外共享模块作用域的成员" class="headerlink" title="四、向外共享模块作用域的成员"></a>四、向外共享模块作用域的成员</h4><h5 id="1、module对象"><a href="#1、module对象" class="headerlink" title="1、module对象"></a>1、module对象</h5><p>在每个.js自定义模块中都有一个module对象，它里面存储了和当前模块有关的信息，打印如下：</p><pre class=" language-js"><code class="language-js">Module <span class="token punctuation">{</span>  id<span class="token punctuation">:</span> <span class="token string">'.'</span><span class="token punctuation">,</span>  path<span class="token punctuation">:</span> <span class="token string">'D:\\桌面\\学习\\正式学习\\013-node.js\\node基础'</span><span class="token punctuation">,</span>  exports<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  filename<span class="token punctuation">:</span> <span class="token string">'D:\\桌面\\学习\\正式学习\\013-node.js\\node基础\\016-加载模块.js'</span><span class="token punctuation">,</span>  loaded<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  paths<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">'D:\\桌面\\学习\\正式学习\\013-node.js\\node基础\\node_modules'</span><span class="token punctuation">,</span>    <span class="token string">'D:\\桌面\\学习\\正式学习\\013-node.js\\node_modules'</span><span class="token punctuation">,</span>    <span class="token string">'D:\\桌面\\学习\\正式学习\\node_modules'</span><span class="token punctuation">,</span>    <span class="token string">'D:\\桌面\\学习\\node_modules'</span><span class="token punctuation">,</span>    <span class="token string">'D:\\桌面\\node_modules'</span><span class="token punctuation">,</span>    <span class="token string">'D:\\node_modules'</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="2、module-exports对象"><a href="#2、module-exports对象" class="headerlink" title="2、module.exports对象"></a>2、module.exports对象</h5><p>在自定义模块中，可以使用module.exports对象，将模块内的成员共享出去，供外界使用</p><p>外界用require()方法导入自定义模块时，得到的就是module.exports所指向的对象</p><p>自定义：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 挂载一个username属性</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token comment" spellcheck="true">// 挂载一个sayHello方法</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>调用：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./017-自定义模块'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>username<span class="token punctuation">)</span>m<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="3、共享成员时的注意点"><a href="#3、共享成员时的注意点" class="headerlink" title="3、共享成员时的注意点"></a>3、共享成员时的注意点</h5><p>使用require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 挂载一个username属性</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token comment" spellcheck="true">// 挂载一个sayHello方法</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello!'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    nickname<span class="token punctuation">:</span> <span class="token string">'小黑'</span><span class="token punctuation">,</span>    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果为：</p><pre class=" language-powershell"><code class="language-powershell"><span class="token punctuation">{</span> nickname: <span class="token string">'小黑'</span><span class="token punctuation">,</span> sayHi: <span class="token namespace">[Function: sayHi]</span> <span class="token punctuation">}</span></code></pre><h5 id="4、exports对象"><a href="#4、exports对象" class="headerlink" title="4、exports对象"></a>4、exports对象</h5><p>由于module.exports单词写起来比较复杂，为了简化向外共享成员的代码，Node提供了exports对象。<font color="red">默认情况下，exports和module.exports指向同一个对象。</font>最终共享的结果，还是以module.exports指向的对象为准。</p><pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// {}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// {}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><h5 id="5、exports和module-exports的使用误区"><a href="#5、exports和module-exports的使用误区" class="headerlink" title="5、exports和module.exports的使用误区"></a>5、exports和module.exports的使用误区</h5><p>时刻谨记，require()模块时，得到的永远是<font color="red">module.exports指向的对象</font>：</p><p>【注】为了防止混乱，建议大家不要再同一个模块中同时使用exports和module.exports</p><h4 id="五、Node-js中的模块化规范"><a href="#五、Node-js中的模块化规范" class="headerlink" title="五、Node.js中的模块化规范"></a>五、Node.js中的模块化规范</h4><p>Node.js遵循了CommonJs模块化规范，CommonJs规定了模块的特性和各模块之间如何相互依赖</p><p>**<font color="red">CommonJS规定</font>**：</p><ol><li>每个模块内部，module变量代表当前模块。</li><li>module变量是一个对象，他的exports属性（即module.exports）是对外的接口。</li><li>加载某个模块，其实是加载该模块的module.exports属性。require()方法用于加载模块</li></ol><h3 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a><font color="red">npm与包</font></h3><h4 id="一、包"><a href="#一、包" class="headerlink" title="一、包"></a>一、包</h4><h5 id="1、什么是包"><a href="#1、什么是包" class="headerlink" title="1、什么是包"></a>1、什么是包</h5><p>Node.js中的第三方模块又叫做包</p><p>就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同</p><h5 id="2、包的来源"><a href="#2、包的来源" class="headerlink" title="2、包的来源"></a>2、包的来源</h5><p>不同于Node.js中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用</p><p>【注】Node.js中的包都是免费且开源的，不需要付费即可免费下载使用。</p><h5 id="3、为什么需要包"><a href="#3、为什么需要包" class="headerlink" title="3、为什么需要包"></a>3、为什么需要包</h5><p>由于Node.js的内置模块仅提供了一些底层的API，导致在基于内置模块进行项目开发的时候，效率很低</p><p>包是基于内置模块封装出来的，提供了更高级、更方便的API，极大的提高了开发效率</p><p>包和内置模块之间的关系，类似于jQuery和浏览器内置API之间的关系。</p><h5 id="4、从哪里下载包"><a href="#4、从哪里下载包" class="headerlink" title="4、从哪里下载包"></a>4、从哪里下载包</h5><p>国外有一家IT公司，叫做npm，Inc.这家公司旗下有一个非常著名的网站：<a href="https://www.npmjs.com/%EF%BC%8C%E5%AE%83%E6%98%AF%E5%85%A8%E7%90%83%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8C%85%E5%85%B1%E4%BA%AB%E5%B9%B3%E5%8F%B0%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%BB%8E%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%88%B0%E4%BB%BB%E4%BD%95%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%EF%BC%8C%E5%8F%AA%E8%A6%81%E4%BD%A0%E6%9C%89%E8%B6%B3%E5%A4%9F%E7%9A%84%E8%80%90%E5%BF%83">https://www.npmjs.com/，它是全球最大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的耐心</a></p><p>到目前为止，全球约1100多万的开发人员，通过这个包共享平台，开发并共享了120多万个包供我们使用</p><p>npm，Inc.公司提供了一个地址为<a href="https://registry.npmjs.org/%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9D%A5%E5%AF%B9%E5%A4%96%E5%85%B1%E4%BA%AB%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BB%8E%E8%BF%99%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%B8%8B%E8%BD%BD%E8%87%AA%E5%B7%B1%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85">https://registry.npmjs.org/的服务器，来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包</a></p><p>【注】</p><ul><li>从<a href="https://www.npmjs.com/%E7%BD%91%E7%AB%99%E4%B8%8A%E6%90%9C%E7%B4%A2%E8%87%AA%E5%B7%B1%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85">https://www.npmjs.com/网站上搜索自己所需要的包</a></li><li>从<a href="https://registry.npmjs.org/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%B8%8B%E8%BD%BD%E8%87%AA%E5%B7%B1%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85">https://registry.npmjs.org/服务器上下载自己需要的包</a></li></ul><h5 id="5、如何下载包"><a href="#5、如何下载包" class="headerlink" title="5、如何下载包"></a>5、如何下载包</h5><p>npm，Inc.公司提供了一个包管理工具，我们可以使用这个包管理工具，从<a href="https://registry.npmjs.org/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%8A%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E3%80%82">https://registry.npmjs.org/服务器把需要的包下载到本地使用。</a></p><p>这个包管理工具的名字叫做Node Package Manager(简称npm包管理工具)，这个包管理工具随着Node.js的安装包一起被安装到了用户的电脑上</p><p>大家可以在终端中执行npm -v命令，来查看自己电脑上安装的npm包管理工具的版本号</p><h4 id="二、npm初体验"><a href="#二、npm初体验" class="headerlink" title="二、npm初体验"></a>二、npm初体验</h4><h5 id="1、格式化时间的传统做法"><a href="#1、格式化时间的传统做法" class="headerlink" title="1、格式化时间的传统做法"></a>1、格式化时间的传统做法</h5><ol><li>创建格式化时间的自定义模块</li><li>定义格式化时间的方法</li><li>创建一个补零的函数</li><li>从自定义模块中导出格式化时间的函数</li><li>导入格式化时间的自定义模块</li><li>调用格式化时间的函数</li></ol><p>自定义格式化时间模块</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义格式化时间的方法</span><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>dtStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dtStr<span class="token punctuation">)</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> hh <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> mm <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> ss <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hh<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mm<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ss<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 补零函数</span><span class="token keyword">function</span> <span class="token function">padZero</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> n <span class="token punctuation">:</span> <span class="token string">'0'</span> <span class="token operator">+</span> n<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    dateFormat<span class="token punctuation">}</span></code></pre><p>调用：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入自定义模块</span><span class="token keyword">const</span> Time <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./021-dateFormat'</span><span class="token punctuation">)</span><span class="token keyword">const</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Time<span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="2、格式化时间的高级做法"><a href="#2、格式化时间的高级做法" class="headerlink" title="2、格式化时间的高级做法"></a>2、格式化时间的高级做法</h5><ol><li>使用npm包管理工具，在项目中安装格式化时间的包 moment</li><li>使用require()导入格式化时间的包</li><li>参考moment的官方API文档对时间进行格式化</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> moment <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'moment'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">moment</span><span class="token punctuation">(</span><span class="token number">1645613298938</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY-MM-DD HH:mm:ss'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 可以是时间戳也可以是直接获取到的new Date()</span></code></pre><h5 id="3、在项目中安装包的命令"><a href="#3、在项目中安装包的命令" class="headerlink" title="3、在项目中安装包的命令"></a>3、在项目中安装包的命令</h5><p>如果想在项目中安装指定名称的包，需要运行如下的命令：</p><pre class=" language-shell"><code class="language-shell">npm install 包的完整名称</code></pre><p>上述的装包命令可以简写成如下格式：</p><pre class=" language-shell"><code class="language-shell">npm i 包的完整名称</code></pre><h5 id="4、初次装包后多了哪些文件"><a href="#4、初次装包后多了哪些文件" class="headerlink" title="4、初次装包后多了哪些文件"></a>4、初次装包后多了哪些文件</h5><p>初次装包完成后，在项目文件夹下多一个叫做**<font color="red">node_modules文件夹</font><strong>和</strong><font color="skyblue">package-lock.json的配置文件</font>**</p><p>其中：</p><p>**<font color="red">node_modules文件夹</font>**用来存放所有已经安装到项目中的包。require()导入第三方包时，就是从这个目录中查找并加载包</p><p>**<font color="skyblue">package-lock.json的配置文件</font>**用来记录node_modules目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等</p><p>【注】程序员不要手动修改node_modules或者package-lock.json文件中的任何代码，npm包管理工具会自动维护它们</p><h5 id="5、安装指定版本的包"><a href="#5、安装指定版本的包" class="headerlink" title="5、安装指定版本的包"></a>5、安装指定版本的包</h5><p>默认情况下，使用npm install命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过**@符号**指定具体的版本，例如：</p><pre class=" language-shell"><code class="language-shell">npm i moment@2.22.0</code></pre><h5 id="6、包的语义化版本规范"><a href="#6、包的语义化版本规范" class="headerlink" title="6、包的语义化版本规范"></a>6、包的语义化版本规范</h5><p>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如2.24.0</p><p>其中每一位数字所代表的含义如下：</p><p>第一部分数字：**<font color="red">大版本</font>**</p><p>第二部分数字：**<font color="blue">功能版本</font>**</p><p>第三部分数字：<strong>Bug修复版本</strong></p><p>**<font color="red">版本号提升的规则</font>**：只要前面的版本号增长了，则后面的版本号归零</p><h4 id="三、包管理配置文件"><a href="#三、包管理配置文件" class="headerlink" title="三、包管理配置文件"></a>三、包管理配置文件</h4><p>npm规定，在项目根目录中，必须提供一个叫做package.json的包管理配置文件。用来记录与项目有关的一些配置信息。例如：</p><ul><li>项目的名称、版本号、描述等</li><li>项目中都用到了哪些包</li><li>那些包只在开发期间会用到</li><li>那些包在开发和部署时都需要用到</li></ul><h5 id="1、多人协作的问题"><a href="#1、多人协作的问题" class="headerlink" title="1、多人协作的问题"></a>1、多人协作的问题</h5><h5 id="2、如何记录项目中安装了哪些包"><a href="#2、如何记录项目中安装了哪些包" class="headerlink" title="2、如何记录项目中安装了哪些包"></a>2、如何记录项目中安装了哪些包</h5><p>在项目根目录中，创建一个叫做package.json的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除node_modules目录之后，在团队成员之间共享项目的源代码。</p><p>【注】：在今后的项目开发中，一定要把node_modules文件夹，添加到.gitignore忽略文件中。</p><h5 id="3、快速创建packag-json"><a href="#3、快速创建packag-json" class="headerlink" title="3、快速创建packag.json"></a>3、快速创建packag.json</h5><p>npm包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建package.json这个包管理配置文件：</p><pre class=" language-shell"><code class="language-shell">npm init -y</code></pre><p>【注】</p><ol><li>上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格</li><li>运行 npm install命令安装包的时候，npm包管理工具会自动把包的名称和版本号，记录到package.json中。</li></ol><h5 id="4、dependencies节点"><a href="#4、dependencies节点" class="headerlink" title="4、dependencies节点"></a>4、dependencies节点</h5><p>package.json文件中，有一个dependencies节点，专门用来记录您使用npm install命令安装了哪些包。</p><h5 id="5、一次性安装所有的包"><a href="#5、一次性安装所有的包" class="headerlink" title="5、一次性安装所有的包"></a>5、一次性安装所有的包</h5><p>当我们拿到了一个剔除了node_modules的项目之后，需要先把所有的包下载到项目中，才能将项目运转起来。</p><p>否则会报类似于下面的错误：</p><pre class=" language-shell"><code class="language-shell">Error:Cannot find module 'moment'</code></pre><p>可以运行 npm install命令（或npm i）一次性安装所有的依赖包</p><h5 id="6、卸载包"><a href="#6、卸载包" class="headerlink" title="6、卸载包"></a>6、卸载包</h5><p>可以运行npm uninstall命令，来卸载指定的包：</p><pre class=" language-shell"><code class="language-shell">npm uninstall moment</code></pre><h5 id="7、devDependencies节点"><a href="#7、devDependencies节点" class="headerlink" title="7、devDependencies节点"></a>7、devDependencies节点</h5><p>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录在devDependencies节点中。与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到dependencies节点中。</p><pre class=" language-shell"><code class="language-shell">// 安装指定的包，并记录到devDependencies节点中npm i 包名 -D// 注意：上述命令是简写形式，等价于下面的完整写法：npm install 包名 --save-dev</code></pre><h4 id="四、解决下包速度慢的问题"><a href="#四、解决下包速度慢的问题" class="headerlink" title="四、解决下包速度慢的问题"></a>四、解决下包速度慢的问题</h4><h5 id="1、为什么下包速度慢"><a href="#1、为什么下包速度慢" class="headerlink" title="1、为什么下包速度慢"></a>1、为什么下包速度慢</h5><p>在使用npm下包的时候，默认从国外的<a href="https://registry.npmjs.org/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%EF%BC%8C%E6%AD%A4%E6%97%B6%EF%BC%8C%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E8%BE%93%E9%9C%80%E8%A6%81%E7%BB%8F%E8%BF%87%E6%BC%AB%E9%95%BF%E7%9A%84%E6%B5%B7%E5%BA%95%E5%85%89%E7%BC%86%EF%BC%8C%E5%9B%A0%E6%AD%A4%E4%B8%8B%E5%8C%85%E9%80%9F%E5%BA%A6%E4%BC%9A%E5%BE%88%E6%85%A2">https://registry.npmjs.org/服务器进行下载，此时，网络数据的传输需要经过漫长的海底光缆，因此下包速度会很慢</a></p><h5 id="2、淘宝的NPM镜像服务器"><a href="#2、淘宝的NPM镜像服务器" class="headerlink" title="2、淘宝的NPM镜像服务器"></a>2、淘宝的NPM镜像服务器</h5><p>淘宝在国内搭建了一个服务器，专门把国外官方服务器上的包同步到国内的服务器，然后在国内提供下包的服务。从而极大的提高了下包的速度。</p><p>扩展：</p><p>镜像（Mirroring）是一种文件存储形式，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像</p><h5 id="3、切换npm的下包镜像源"><a href="#3、切换npm的下包镜像源" class="headerlink" title="3、切换npm的下包镜像源"></a>3、切换npm的下包镜像源</h5><p>下包的镜像源，指的就是下包的服务器地址。</p><pre class=" language-shell"><code class="language-shell">// 查看当前的下包镜像源npm config get registry// 将下包的镜像源切换为淘宝镜像源npm config set registry=https://registry.npm.taobao.org///检查镜像源是否切换成功npm config get registry</code></pre><h5 id="4、nrm"><a href="#4、nrm" class="headerlink" title="4、nrm"></a>4、nrm</h5><p>为了更方便的切换下包的镜像源，我们可以安装nrm这个小工具，利用nrm提供的终端命令，可以快速查看和切换下包的镜像源。</p><pre class=" language-shell"><code class="language-shell">// 通过npm包管理器，将nrm安装为全局可用的工具npm i nrm -g// 查看所有可用的镜像源nrm ls// 将下包的镜像源切换为taobao镜像nrm use taobao</code></pre><h4 id="五、包的分类"><a href="#五、包的分类" class="headerlink" title="五、包的分类"></a>五、包的分类</h4><p>使用npm包管理工具下载的包，共分为两大类，分别是：</p><ul><li><strong>1、项目包</strong></li></ul><p>那些被安装到项目node_modules目录中的包，都是项目包。</p><p>项目包又分为两类，分别是：</p><ol><li>**<font color="red">开发依赖包</font>**（被记录到devDependencies节点中的包，只在开发期间会用到）</li><li>**<font color="red">核心依赖包</font>**（被记录到dependencies节点中的包，在开发期间和项目上线之后都会用到）</li></ol><ul><li><strong>2、全局包</strong></li></ul><p>在执行npm install命令时，如果提供了-g参数，则会把包安装为全局包</p><p>全局包会被安装到C:\Users\用户目录\AppData\Roaming\npm\node_modules目录下（nvm下载的在设定的nodejs目录中）</p><pre class=" language-shell"><code class="language-shell">npm i 包名 -gnpm uninstall 包名 -g</code></pre><p>【注】</p><ol><li>只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令</li><li>判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可</li></ol><p><strong>3、i5ting_toc</strong></p><p>i5ting_toc是一个可以把md文档转为html页面的小工具，使用步骤如下：</p><pre class=" language-shell"><code class="language-shell">// 将i5ting_toc安装为全局包npm install -g i5ting_toc// 调用i5ting_toc，轻松实现md转html的功能i5ting_toc -f 要转换的md文件路径 -o</code></pre><h4 id="六、规范的包的结构"><a href="#六、规范的包的结构" class="headerlink" title="六、规范的包的结构"></a>六、规范的包的结构</h4><p>在清楚了包的概念、以及如何下载和使用包之后，接下来，我们深入了解一下包的内部结构</p><p>一个规范的包，它的组成结构，必须符合以下3点要求：</p><ol><li>包必须以单独的目录而存在</li><li>包的顶级目录下要必须包含package.json这个包管理配置文件</li><li>package.json中必须包含name， version，main这三个属性，    分别代表包的名字、版本号、包的入口。</li></ol><p>【注】以上3点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考如下网址：</p><p><a href="https://classic.yarnpkg.com/en/docs/package-json">https://classic.yarnpkg.com/en/docs/package-json</a></p><h4 id="七、开发属于自己的包"><a href="#七、开发属于自己的包" class="headerlink" title="七、开发属于自己的包"></a>七、开发属于自己的包</h4><h5 id="1、需要实现的功能"><a href="#1、需要实现的功能" class="headerlink" title="1、需要实现的功能"></a>1、需要实现的功能</h5><p>例：</p><ol><li>格式化日期</li><li>转义HTML中的特殊字符</li><li>还原HTML中的特殊字符</li></ol><h5 id="2、初始化包的基本结构"><a href="#2、初始化包的基本结构" class="headerlink" title="2、初始化包的基本结构"></a>2、初始化包的基本结构</h5><ol><li>新建itxiaoyu-tools文件夹，作为包的根目录</li><li>在itxiaoyu-tools文件夹中，新建如下三个文件：</li></ol><ul><li>​    package.json（包管理配置文件）</li><li>​    index.js（包的入口文件）</li><li>​    README.md（包的说明文档）</li></ul><h5 id="3、初始化package-json"><a href="#3、初始化package-json" class="headerlink" title="3、初始化package.json"></a>3、初始化package.json</h5><p><code>npm init -y</code>初始化生成的package.json文件</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"itxiaoyu-tools"</span><span class="token punctuation">,</span>  // 包的名称(不能重复<span class="token punctuation">)</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>    // 包的版本号  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 包功能的描述信息  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>    // 包的入口文件  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 可以自定义--包的关键字  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        // 作者  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span>    // 开源许可协议<span class="token punctuation">}</span></code></pre><p>关于更多的license许可协议相关的内容，可自行查找</p><h5 id="4、在index-js中定义格式化时间的方法"><a href="#4、在index-js中定义格式化时间的方法" class="headerlink" title="4、在index.js中定义格式化时间的方法"></a>4、在index.js中定义格式化时间的方法</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这是包的入口文件</span><span class="token comment" spellcheck="true">// 格式化时间的方法</span><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>dtStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dtStr<span class="token punctuation">)</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> hh <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> mm <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> ss <span class="token operator">=</span> <span class="token function">padZero</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hh<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mm<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ss<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 补零函数</span><span class="token keyword">function</span> <span class="token function">padZero</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">9</span> <span class="token operator">?</span> n <span class="token punctuation">:</span> <span class="token string">'0'</span> <span class="token operator">+</span> n<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    dateFormat<span class="token punctuation">}</span></code></pre><h5 id="5、在index-js中定义转义HTML的方法"><a href="#5、在index-js中定义转义HTML的方法" class="headerlink" title="5、在index.js中定义转义HTML的方法"></a>5、在index.js中定义转义HTML的方法</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 转义函数</span><span class="token keyword">function</span> <span class="token function">htmlEscape</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> htmlStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;|>|"|&amp;/g</span><span class="token punctuation">,</span> match <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'&lt;'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'&amp;lt;'</span>            <span class="token keyword">case</span> <span class="token string">'>'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'&amp;gt;'</span>            <span class="token keyword">case</span> <span class="token string">'"'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'&amp;quot;'</span>            <span class="token keyword">case</span> <span class="token string">'&amp;'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'&amp;amp;'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="6、在index-js中定义还原HTML的方法"><a href="#6、在index-js中定义还原HTML的方法" class="headerlink" title="6、在index.js中定义还原HTML的方法"></a>6、在index.js中定义还原HTML的方法</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 还原转义函数</span><span class="token keyword">function</span> <span class="token function">htmlUnEscape</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g</span><span class="token punctuation">,</span> match <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'&lt;'</span>            <span class="token keyword">case</span> <span class="token string">'&amp;gt;'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'>'</span>            <span class="token keyword">case</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'"'</span>            <span class="token keyword">case</span> <span class="token string">'&amp;amp;'</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token string">'&amp;'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="7、将不同的功能进行模块化拆分"><a href="#7、将不同的功能进行模块化拆分" class="headerlink" title="7、将不同的功能进行模块化拆分"></a>7、将不同的功能进行模块化拆分</h5><ol><li>将格式化时间的功能，拆分到src -&gt; dateFormat.js中</li><li>将处理HTML字符串的功能，拆分到 src -&gt; htmlEscape.js中</li><li>在index.js中，导入两个模块，得到需要向外共享的方法</li><li>在index.js中，使用module.exports把对应的方法共享出去</li></ol><p>【注】</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这是包的入口文件</span><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/dateFormat'</span><span class="token punctuation">)</span><span class="token keyword">const</span> escape <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./src/htmlEscape'</span><span class="token punctuation">)</span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>date<span class="token punctuation">,</span>    <span class="token operator">...</span>escape<span class="token punctuation">}</span></code></pre><h5 id="8、编写包的说明文档"><a href="#8、编写包的说明文档" class="headerlink" title="8、编写包的说明文档"></a>8、编写包的说明文档</h5><p>包根目录中的README.md文件，是包的使用说明文档。通过它，我们可以事先把包的使用说明和，以markdown的格式写出来，方便用户参考。</p><p>README文件中具体写什么内容，没有强制性的要求；只要能够清晰的把包的作用、用法、注意事项等描述清楚即可。</p><p>我们所创建的这个包的README.md文档中，会包含以下6项内容：</p><p>安装方式、导入方式、格式化时间、转义HTML中的特殊字符、还原HTML中的特殊字符、开源协议</p><h4 id="八、发布包"><a href="#八、发布包" class="headerlink" title="八、发布包"></a>八、发布包</h4><h5 id="1、注册npm账号"><a href="#1、注册npm账号" class="headerlink" title="1、注册npm账号"></a>1、注册npm账号</h5><p>访问<a href="http://www.npmjs.com/%E7%BD%91%E7%AB%99%EF%BC%8C%E7%82%B9%E5%87%BBsign">http://www.npmjs.com/网站，点击sign</a> up按钮，进入注册用户界面</p><p>填写账号相关的信息：Full Name、Public Email、Username、Password</p><p>点击Create an Account按钮，注册账号</p><p>登录邮箱，点击验证链接，进行账号的验证</p><h5 id="2、登录npm账号"><a href="#2、登录npm账号" class="headerlink" title="2、登录npm账号"></a>2、登录npm账号</h5><p>npm账号注册完成后，可以在终端中执行npm login命令，依次输入用户名、密码、邮箱后，即可登录成功</p><pre class=" language-shell"><code class="language-shell">npm login</code></pre><p><strong><font color="red">【注】在运行npm login命令之前，必须先把下包的服务器地址切换为npm的官方服务器。否则会导致发布包失败</font></strong></p><h5 id="3、把包发布在npm上"><a href="#3、把包发布在npm上" class="headerlink" title="3、把包发布在npm上"></a>3、把包发布在npm上</h5><p>将终端切换到包的根目录之后，运行npm publish命令，即可将包发布在npm上（【注】包的名不能相同）</p><pre class=" language-shell"><code class="language-shell">npm publish</code></pre><h5 id="4、删除已发布的包"><a href="#4、删除已发布的包" class="headerlink" title="4、删除已发布的包"></a>4、删除已发布的包</h5><p>运行 npm unpublish 包名 –force命令，即可从npm中删除已发布的包</p><pre class=" language-shell"><code class="language-shell">npm unpublish 包名 --force</code></pre><p>【注】</p><p>npm unpublish命令只能删除72小时以内发布的包</p><p>npm unpublish删除的包，在24小时内不允许重复发布</p><p>发布包的时候要慎重，尽量不要往npm上发布没有意义的包</p><h3 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a><font color="red">模块的加载机制</font></h3><h4 id="一、优先从缓存中加载"><a href="#一、优先从缓存中加载" class="headerlink" title="一、优先从缓存中加载"></a>一、优先从缓存中加载</h4><p>模块在第一次加载后会被缓存。这也意味着多次调用require()不会导致模块的代码被执行多次。</p><p>【注】：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率</p><h4 id="二、内置模块的加载机制"><a href="#二、内置模块的加载机制" class="headerlink" title="二、内置模块的加载机制"></a>二、内置模块的加载机制</h4><p>内置模块是由Node.js官方提供的模块，**<font color="red">内置模块的加载优先级是最高的</font>**</p><p>例如，require(‘fs’)始终返回内置的fs模块，即使在node_modules目录下有名字相同的包也叫做fs</p><h4 id="三、自定义模块的加载机制"><a href="#三、自定义模块的加载机制" class="headerlink" title="三、自定义模块的加载机制"></a>三、自定义模块的加载机制</h4><p>使用require()加载自定义模块时，必须指定以./或者../开头的路径标识符。在加载自定义模块时，如果没指定./或../这样的路径标识符，则node会把它当做内置模块或第三方模块进行加载</p><p>同时，在使用require()导入自定义模块时，如果省略了文件的扩展名，则Node.js会按顺序分别尝试加载以下的文件：</p><ol><li>按照确切的文件名进行加载</li><li>补全.js扩展名进行加载</li><li>补全.json扩展名进行加载</li><li>补全.node扩展名进行加载</li><li>加载失败，终端报错</li></ol><h4 id="四、第三方模块的加载机制"><a href="#四、第三方模块的加载机制" class="headerlink" title="四、第三方模块的加载机制"></a>四、第三方模块的加载机制</h4><p>如果传递给require()的模块标识符不是一个内置模块，也没有以’./‘或’../‘开头，则Node.js会从当前模块的父目录开始，尝试从/node_modules文件夹中加载第三方模块。</p><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录</p><p>例如：，假设在‘C:\Users\itheima\project\foo.js’文件里调用了require(‘tools’)，则Node.js会按以下顺序查找：</p><ol><li>C:\Users\itheima\project\node_modules\tools</li><li>C:\Users\itheima\node_modules\tools</li><li>C:\Users\node_modules\tools</li><li>C:\node_modules\tools</li><li>如果还找不到，就会报错</li></ol><h4 id="五、目录作为模块"><a href="#五、目录作为模块" class="headerlink" title="五、目录作为模块"></a>五、目录作为模块</h4><p>当把目录作为模块标识符，传递给require()进行加载的时候，有三种加载方式：</p><ol><li><p>在被加载的目录下查找一个叫做package.json的文件，并寻找main属性，作为require()加载的入口</p></li><li><p>如果目录里没有package.json文件，或者main入口不存在或无法解析，则Node.js将会试图加载目录下的index.js文件</p></li><li><p>如果以上两步都失败了，则Node.js会在终端打印错误，报告模块的缺失：Error: Cannot find module ‘xxx’</p></li></ol><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a><center>Express</center></h2><h3 id="初识Express"><a href="#初识Express" class="headerlink" title="初识Express"></a><font color="red">初识Express</font></h3><h4 id="一、Express简介"><a href="#一、Express简介" class="headerlink" title="一、Express简介"></a>一、Express简介</h4><h5 id="1、什么是Express"><a href="#1、什么是Express" class="headerlink" title="1、什么是Express"></a>1、什么是Express</h5><p>官方给出的概念：Express是基于Node.js平台，快速、开放、极简的Web开发框架</p><p>通俗的理解：Express的作用和Node.js内置的http模块类似，是专门用来创建Web服务器的</p><p><strong>Express的本质</strong>：就是一个npm上的第三方包，提供了快速创建Web服务器的便捷方法</p><p>Express的中文官网：<a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><h5 id="2、进一步理解Express"><a href="#2、进一步理解Express" class="headerlink" title="2、进一步理解Express"></a>2、进一步理解Express</h5><p>思考：不使用Express能否创建Web服务器？</p><p>答案：能，使用Node.js提供的原生http模块即可。</p><p>思考：既生瑜何生亮（有了http内置模块，为什么还要用Express）？</p><p>答案：http内置模块用起来很复杂，开发效率低；Express是基于内置的http模块进一步封装出来的，能够极大的提高开发效率。</p><p>思考：http内置模块与Express是什么关系？</p><p>答案：类似于浏览器中Web API和jQuery的关系。后者是基于前者进一步封装出来的。</p><h5 id="3、Express能做什么"><a href="#3、Express能做什么" class="headerlink" title="3、Express能做什么"></a>3、Express能做什么</h5><p>对于前端程序员来说，最常见的两种服务器，分别是：</p><ul><li><strong>Web网站服务器：</strong> 专门对外提供Web网页资源的服务器。</li><li><strong>API接口服务器：</strong> 专门对外提供API接口的服务器。</li></ul><p>使用Express，我们可以方便、快速的创建Web网站的服务器或API接口的服务器。</p><h4 id="二、Express的基本使用"><a href="#二、Express的基本使用" class="headerlink" title="二、Express的基本使用"></a>二、Express的基本使用</h4><h5 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h5><p>在项目所处的根目录中，运行如下的终端命令，即可将express安装到项目中使用：</p><pre class=" language-shell"><code class="language-shell">npm i express@4.17.1</code></pre><h5 id="2、创建基本的Web服务器"><a href="#2、创建基本的Web服务器" class="headerlink" title="2、创建基本的Web服务器"></a>2、创建基本的Web服务器</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1、导入express</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2、创建Web服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3、调用app.listen(端口号，启动成功后的回调函数)，启动服务器</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://192.168.1.4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://localhost'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="3、监听GET请求"><a href="#3、监听GET请求" class="headerlink" title="3、监听GET请求"></a>3、监听GET请求</h5><p>通过app.get()方法，可以监听客户端的GET请求，具体的语法格式如下：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'请求的URL'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*处理函数*/</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>参数1：客户端请求的URL地址</p><p>参数2：请求对应的处理函数</p><p>​                    req：请求对象（包含了与请求相关的属性与方法）</p><p>​                    res： 响应对象（包含了与响应相关的属性与方法）</p><h5 id="4、监听POST请求"><a href="#4、监听POST请求" class="headerlink" title="4、监听POST请求"></a>4、监听POST请求</h5><p>通过app.post()方法，可以监听客户端的post请求，具体的语法格式如下：</p><pre class=" language-shell"><code class="language-shell">app.post('请求的URL', function(req, res){/*处理函数*/})</code></pre><p>参数1：客户端请求的URL地址</p><p>参数2：请求对应的处理函数</p><p>​                    req：请求对象（包含了与请求相关的属性与方法）</p><p>​                    res： 响应对象（包含了与响应相关的属性与方法）</p><h5 id="5、把内容响应给客户端"><a href="#5、把内容响应给客户端" class="headerlink" title="5、把内容响应给客户端"></a>5、把内容响应给客户端</h5><p>通过res.send()方法，可以把处理好的内容，发送给客户端：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//get请求</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// post请求</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'ls'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><h5 id="6、获取URL中携带的查询参数"><a href="#6、获取URL中携带的查询参数" class="headerlink" title="6、获取URL中携带的查询参数"></a>6、获取URL中携带的查询参数</h5><p>通过req.query对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>req<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span>res<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">*</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过req.query可以获取到客户端发送过来的查询参数</span>  <span class="token comment" spellcheck="true">// 注意：默认情况下，req.query是一个空对象</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">*</span>req<span class="token operator">*</span><span class="token punctuation">.</span>query<span class="token punctuation">)</span>  <span class="token operator">*</span>res<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token operator">*</span>req<span class="token operator">*</span><span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="7、获取URL中的动态参数"><a href="#7、获取URL中的动态参数" class="headerlink" title="7、获取URL中的动态参数"></a>7、获取URL中的动态参数</h5><p>通过req.params对象，可以访问到URL中，通过**<font color="red">：</font>**匹配到的动态参数：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注意：这里的：id是一个动态的参数和生成的对象中的键有关</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// req.params是动态匹配到的URL参数，默认也是一个空对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  /user/1  结果 {"id": "1"}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="三、托管静态资源"><a href="#三、托管静态资源" class="headerlink" title="三、托管静态资源"></a>三、托管静态资源</h4><h5 id="1、express-static"><a href="#1、express-static" class="headerlink" title="1、express.static()"></a>1、express.static()</h5><p>express提供了一个非常好用的函数，叫做express.static()，通过它，我们可以非常方便的创建一个静态资源的服务器，例如，通过如下代码就可以将public目录下的图片、CSS文件、JavaScript文件对外开始访问了：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>现在，你就可以访问public目录下的所有文件了：</p><p><a href="http://localhost/images/bg.jpg">http://localhost/images/bg.jpg</a></p><p><a href="http://localhost/css/style.css">http://localhost/css/style.css</a></p><p><a href="http://localhost/js/login.js">http://localhost/js/login.js</a></p><p>【注】：Express在指定的静态目录中查找文件，并对外提供资源的访问路径。因此，存放静态文件的目录名不会出现在URL中。</p><h5 id="2、托管多个静态资源目录"><a href="#2、托管多个静态资源目录" class="headerlink" title="2、托管多个静态资源目录"></a>2、托管多个静态资源目录</h5><p>如果要托管多个静态资源目录，请多次调用express.static()函数</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>访问静态资源文件时，express.static()函数会根据目录的添加顺序查找所需的文件。</p><h5 id="3、挂在路径前缀"><a href="#3、挂在路径前缀" class="headerlink" title="3、挂在路径前缀"></a>3、挂在路径前缀</h5><p>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>现在，你就可以访问public目录下的所有文件了：</p><p><a href="http://localhost/public/images/bg.jpg">http://localhost/public/images/bg.jpg</a></p><p><a href="http://localhost/public/css/style.css">http://localhost/public/css/style.css</a></p><p><a href="http://localhost/public/js/login.js">http://localhost/public/js/login.js</a></p><h4 id="四、nodemon"><a href="#四、nodemon" class="headerlink" title="四、nodemon"></a>四、nodemon</h4><h5 id="1、为什么要使用nodemon"><a href="#1、为什么要使用nodemon" class="headerlink" title="1、为什么要使用nodemon"></a>1、为什么要使用nodemon</h5><p>在编写调试Node.js项目的时候，如果修改了项目的代码，则需要频繁的手动close掉，然后再重新启动，非常繁琐。</p><p>现在，我们可以使用nodemon（<a href="https://www.npmjs.com/package/nodemon%EF%BC%89%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%AE%83%E8%83%BD%E5%A4%9F%E7%9B%91%E5%90%AC%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%8F%98%E5%8A%A8%EF%BC%8C%E5%BD%93%E4%BB%A3%E7%A0%81%E8%A2%AB%E4%BF%AE%E6%94%B9%E5%90%8E%EF%BC%8Cnodemon%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B8%AE%E6%88%91%E4%BB%AC%E9%87%8D%E5%90%AF%E9%A1%B9%E7%9B%AE%EF%BC%8C%E6%9E%81%E5%A4%A7%E6%96%B9%E4%BE%BF%E4%BA%86%E5%BC%80%E5%8F%91%E5%92%8C%E8%B0%83%E8%AF%95%E3%80%82">https://www.npmjs.com/package/nodemon）这个工具，它能够监听项目文件的变动，当代码被修改后，nodemon会自动帮我们重启项目，极大方便了开发和调试。</a></p><h5 id="2、安装nodemon"><a href="#2、安装nodemon" class="headerlink" title="2、安装nodemon"></a>2、安装nodemon</h5><p>在终端中，运行如下命令，即可将nodemon安装为全局可用的工具：</p><pre class=" language-shell"><code class="language-shell">npm i -g nodemon</code></pre><h5 id="3、使用nodemon"><a href="#3、使用nodemon" class="headerlink" title="3、使用nodemon"></a>3、使用nodemon</h5><p>当基于Node.js编写了一个网站应用的时候，传统的方式，是运行node app.js命令，来启动项目。这样做的坏处是：代码被修改之后，需要手动重启项目。</p><p>现在，我们可以将node命令替换为nodemon命令，使用nodemon app.js来启动项目。这样做的好处是：代码被修改之后，会被nodemon监听到，从而实现自动重启项目的效果。</p><pre class=" language-shell"><code class="language-shell">node app.js// 将上面的终端命令，替换为下面的终端命令，即可实现自动重启项目的效果nodemon app.js</code></pre><h3 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a><font color="red">Express路由</font></h3><h4 id="一、路由的概念"><a href="#一、路由的概念" class="headerlink" title="一、路由的概念"></a>一、路由的概念</h4><h5 id="1、什么是路由"><a href="#1、什么是路由" class="headerlink" title="1、什么是路由"></a>1、什么是路由</h5><p>广义上来讲，路由就是映射关系。</p><h5 id="2、现实中的路由案例"><a href="#2、现实中的路由案例" class="headerlink" title="2、现实中的路由案例"></a>2、现实中的路由案例</h5><p>就像打10086后的按键操作</p><p><img src="C:\Users\xiao\AppData\Roaming\Typora\typora-user-images\1645757867664.png" alt="1645757867664"></p><h5 id="3、Express中的路由"><a href="#3、Express中的路由" class="headerlink" title="3、Express中的路由"></a>3、Express中的路由</h5><p>在Express中，路由指的是客户端的请求与服务器处理函数之间的映射关系。</p><p>Express中的路由分3部分组成，分别是请求的类型、请求的URL地址、处理函数，格式如下：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">METHOD</span><span class="token punctuation">(</span>PATH<span class="token punctuation">,</span> HANDLER<span class="token punctuation">)</span></code></pre><p>METHOD代表的是请求的类型，PATH代表的是请求的URL地址，HANDLER代表的是处理函数</p><h5 id="4、Express中的路由的例子"><a href="#4、Express中的路由的例子" class="headerlink" title="4、Express中的路由的例子"></a>4、Express中的路由的例子</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//get请求</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// post请求</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'ls'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> </code></pre><h5 id="5、路由的匹配过程"><a href="#5、路由的匹配过程" class="headerlink" title="5、路由的匹配过程"></a>5、路由的匹配过程</h5><p>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。</p><p>在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的URL同时匹配成功，则Express会将这次请求，转交给对应的function函数进行处理。</p><p><img src="C:\Users\xiao\AppData\Roaming\Typora\typora-user-images\1645757905113.png" alt="1645757905113"></p><p>路由匹配的注意点：</p><ol><li>按照定义的先后顺序进行匹配</li><li>请求类型和请求的URL同时匹配成功，才会调用对应的处理函数。</li></ol><h4 id="二、路由的使用"><a href="#二、路由的使用" class="headerlink" title="二、路由的使用"></a>二、路由的使用</h4><h5 id="1、最简单的用法"><a href="#1、最简单的用法" class="headerlink" title="1、最简单的用法"></a>1、最简单的用法</h5><p>在Express中使用路由最简单的方式，就是把路由挂载到app上，示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 在这里，调用express.static()方法，快速的对外提供静态资源</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/hdt'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./hdt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://192.168.1.4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://localhost'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="2、模块化路由"><a href="#2、模块化路由" class="headerlink" title="2、模块化路由"></a>2、模块化路由</h5><p>为了方便对路由进行模块化的管理，Express不交易将路由直接挂载到app上，而是推荐将路由抽离为单独的模块</p><p>将路由抽离为单独模块的步骤如下：</p><ol><li>创建路由模块对应的.js文件</li><li>调用express.Router()函数创建路由对象</li><li>向路由对象上挂载具体的路由</li><li>使用module.exports向外共享路由对象</li><li>使用app.use()函数注册路由模块</li></ol><h5 id="3、创建路由模块"><a href="#3、创建路由模块" class="headerlink" title="3、创建路由模块"></a>3、创建路由模块</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 导入express模块</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 创建路由对象</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 挂载获取用户列表的路由</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Get user list.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                                   router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user/add'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 挂载添加用户的路由</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Add new user.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router <span class="token comment" spellcheck="true">// 向外导出路由对象</span></code></pre><h5 id="4、注册路由模块"><a href="#4、注册路由模块" class="headerlink" title="4、注册路由模块"></a>4、注册路由模块</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入路由模块</span><span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./002-自定义的路由模块'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 注册模块</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>userRouter<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://192.168.1.4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong><font color="skyblue">【注】app.use()函数的作用，就是来注册全局中间件</font></strong></p><h5 id="5、为路由模块添加前缀"><a href="#5、为路由模块添加前缀" class="headerlink" title="5、为路由模块添加前缀"></a>5、为路由模块添加前缀</h5><p>类似于托管静态资源时，为静态资源统一挂载访问前缀一样，路由模块添加前缀的方式也非常简单：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 导入路由模块</span><span class="token keyword">const</span> userRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./002-自定义的路由模块'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用app.use()注册路由模块，并添加统一的访问前缀/api</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/api'</span><span class="token punctuation">,</span> userRouter<span class="token punctuation">)</span></code></pre><h3 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a><font color="red">Express中间件</font></h3><h4 id="一、中间件的概念"><a href="#一、中间件的概念" class="headerlink" title="一、中间件的概念"></a>一、中间件的概念</h4><h5 id="1、什么是中间件"><a href="#1、什么是中间件" class="headerlink" title="1、什么是中间件"></a>1、什么是中间件</h5><p>中间件（Middleware），特质业务流程的中间处理环节。</p><h5 id="2、现实生活中的例子"><a href="#2、现实生活中的例子" class="headerlink" title="2、现实生活中的例子"></a>2、现实生活中的例子</h5><p>在处理污水的时候，一般都要进过三个处理环节，从而保证处理过后的废水，达到排放标准。</p><p><img src="C:\Users\xiao\AppData\Roaming\Typora\typora-user-images\1645757743666.png" alt="1645757743666"></p><p>处理污水的三个中间处理环节，就可以叫做中间件。</p><h5 id="3、Express中间件的调用流程"><a href="#3、Express中间件的调用流程" class="headerlink" title="3、Express中间件的调用流程"></a>3、Express中间件的调用流程</h5><p>当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理。</p><p><img src="C:\Users\xiao\AppData\Roaming\Typora\typora-user-images\1645757989170.png" alt="1645757989170"></p><h5 id="4、Express中间件的格式"><a href="#4、Express中间件的格式" class="headerlink" title="4、Express中间件的格式"></a>4、Express中间件的格式</h5><p>Express的中间件，本质上就是一个function处理函数，Express中间件的格式如下：</p><p><img src="C:\Users\xiao\AppData\Roaming\Typora\typora-user-images\1645758142742.png" alt="1645758142742"></p><p>【注】中间件函数的形参列表中，必须包含next参数。而路由处理函数中只包含req和res</p><h5 id="5、next函数的作用"><a href="#5、next函数的作用" class="headerlink" title="5、next函数的作用"></a>5、next函数的作用</h5><p>next函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。</p><p><img src="C:\Users\xiao\AppData\Roaming\Typora\typora-user-images\1645757989170.png" alt="1645757989170"></p><h4 id="二、Express中间件的初体验"><a href="#二、Express中间件的初体验" class="headerlink" title="二、Express中间件的初体验"></a>二、Express中间件的初体验</h4><h5 id="1、定义中间件函数"><a href="#1、定义中间件函数" class="headerlink" title="1、定义中间件函数"></a>1、定义中间件函数</h5><p>可以通过如下的方式，定义一个最简单的中间件函数：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义一个最简单的中间件函数</span><span class="token comment" spellcheck="true">// 常量mw所指向的，就是一个中间件函数</span><span class="token keyword">const</span> mw <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个最简单的中间件函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意：在当前中间件的业务处理完毕后，必须调用next()函数</span>    <span class="token comment" spellcheck="true">// 表示把流转关系转交给下一个中间件或路由</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://192.168.1.4:80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="2、全局生效的中间件"><a href="#2、全局生效的中间件" class="headerlink" title="2、全局生效的中间件"></a>2、全局生效的中间件</h5><p>客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件。</p><p>通过调用app.use(<strong>中间件函数</strong>)，即可定义一个全局生效的中间件，示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义一个最简单的中间件函数</span><span class="token comment" spellcheck="true">// 常量mw所指向的，就是一个中间件函数</span><span class="token keyword">const</span> mw <span class="token operator">=</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是一个最简单的中间件函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意：在当前中间件的业务处理完毕后，必须调用next()函数</span>    <span class="token comment" spellcheck="true">// 表示把流转关系转交给下一个中间件或路由</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将mw注册为全局生效的</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>mw<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home page.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'User page.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express server running at http://192.168.1.4:80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="3、定义全局中间件的简化形式"><a href="#3、定义全局中间件的简化形式" class="headerlink" title="3、定义全局中间件的简化形式"></a>3、定义全局中间件的简化形式</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这是定义全局中间件的简写形式</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是最简单的中间件函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="4、中间件的作用"><a href="#4、中间件的作用" class="headerlink" title="4、中间件的作用"></a>4、中间件的作用</h5><p>多个中间件之间，共享同一份req和res。基于这样的特性，我们可以在上游的中间件中，统一为req或res对象添加自定义的属性或方法，供下游的中间件或路由进行使用。</p><p><img src="C:\Users\xiao\AppData\Roaming\Typora\typora-user-images\1645764150327.png" alt="1645764150327"></p><h5 id="5、定义多个全局中间件"><a href="#5、定义多个全局中间件" class="headerlink" title="5、定义多个全局中间件"></a>5、定义多个全局中间件</h5><p>可以使用app.use()连续定义多个全局中间件。客户端请求到达服务器，会按照中间件定义的先后顺序依次进行调用，示例代码如下：</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 第一个全局中间件</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'调用了第一个全局中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 第二个全局中间件</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'调用了第二个全局中间件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 请求这个路由会依次触发上述两个中间件</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'User page.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="6、局部生效的中间件"><a href="#6、局部生效的中间件" class="headerlink" title="6、局部生效的中间件"></a>6、局部生效的中间件</h5><p>不使用app.use()定义的中间件，叫做局部生效的中间件，示例代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义中间件函数mw1</span><span class="token keyword">const</span> mw1 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是局部生效的中间件函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// mw1这个中间件只在“当前路由中生效”，这种用法属于“局部生效的中间件”</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home page.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// mw1这个中间件不会影响下面这个路由 ↓ ↓ ↓</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'User page.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="7、定义多个局部中间件"><a href="#7、定义多个局部中间件" class="headerlink" title="7、定义多个局部中间件"></a>7、定义多个局部中间件</h5><p>可以在路由中， 通过如下两种等价的方式，使用多个局部中间件：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 以下两种写法是“完全等价”的，可根据自己的喜好，选择任意一方式进行使用</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> mw1<span class="token punctuation">,</span> mw2<span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home page.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>mw1<span class="token punctuation">,</span> mw2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Home page.'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="使用Express写接口"><a href="#使用Express写接口" class="headerlink" title="使用Express写接口"></a><font color="red">使用Express写接口</font></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript的基本数据类型</title>
      <link href="/2022/01/30/typescript-de-ji-ben-shu-ju-lei-xing/"/>
      <url>/2022/01/30/typescript-de-ji-ben-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p>typescript的学习，语法部分的第一节，TypeScript中的基本数据类型</p><h2 id="TypeScript的基本数据类型"><a href="#TypeScript的基本数据类型" class="headerlink" title="TypeScript的基本数据类型"></a>TypeScript的基本数据类型</h2><p>主要有以下几种：</p><p>布尔值、数字、字符串、undefined和null、数组和元组（Tuple）、any、void、联合类型.</p><p>对于TypeScript来说会用到类型断言和类型推断（编译器会自行推断）</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 基础类型</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'测试'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 布尔类型 ----->boolean</span>    <span class="token comment" spellcheck="true">// let 变量名：数据类型 = 值</span>    <span class="token keyword">let</span> flag<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数字类型 ----->number</span>    <span class="token keyword">let</span> a1<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">// 十进制</span>    <span class="token keyword">let</span> a2<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span>  <span class="token comment" spellcheck="true">// 二进制</span>    <span class="token keyword">let</span> a3<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o12</span> <span class="token comment" spellcheck="true">// 八进制</span>    <span class="token keyword">let</span> a4<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xa</span> <span class="token comment" spellcheck="true">// 十六进制</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> a4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 字符串类型 ----->string</span>    <span class="token keyword">let</span> str1<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'鸣人'</span>    <span class="token keyword">let</span> str2<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'佐助'</span>    <span class="token keyword">let</span> str3<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'小樱'</span>    <span class="token keyword">let</span> str4<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'卡卡西'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`火影第七班：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str4<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 字符串和数字之间能否一起拼接</span>    <span class="token keyword">let</span> str5<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'我要创造一个有琳的世界'</span>    <span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">4</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'在第'</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">'次忍界大战'</span> <span class="token operator">+</span> str5<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// undefined和null</span>    <span class="token keyword">let</span> und<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined    <span class="token keyword">let</span> nll<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>und<span class="token punctuation">,</span> nll<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// undefined和null都可以作为其他类型的子类型，可以把undefined和null赋值给其他类型的变量，如： number类型的变量</span>    <span class="token comment" spellcheck="true">// 把tsconfig.json中的严格模式关闭就不会报错了</span>    <span class="token comment" spellcheck="true">// let num2:number = undefined</span>    <span class="token keyword">let</span> num2<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token keyword">null</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================================'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数组类型</span>    <span class="token comment" spellcheck="true">// 数组定义方式1</span>    <span class="token comment" spellcheck="true">// 语法： let 变量名：数据类型[] = [值1, 值2, 值3···]</span>    <span class="token keyword">let</span> arr1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数组定义方式2:泛型的写法</span>    <span class="token comment" spellcheck="true">// 语法： let 变量名： Array&lt;数据类型> = [值1, 值2, 值3···]</span>    <span class="token keyword">let</span> arr2<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 【注】：数组定义后，里边的数据的类型必须和定义数组时候的类型是一致的，否则有错误提示信息，当然也不会编译通过的</span>    <span class="token comment" spellcheck="true">// 元组类型(Tuple):在定义数组的时候，类型和数据的个数一开始就已经限定了</span>    <span class="token keyword">let</span> arr3<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'逆鳞'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 【注】：元组类型在使用的时候，数据的类型的位置和数据的个数应该和定义元组时候的数据类型及位置是一致的</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'========================='</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 枚举类型,枚举里面的每个数据值都可以叫元素，每个元素都有自己的编号，编号是从0开始的，依次的递增加1</span>    <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>        red<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>        green<span class="token punctuation">,</span>        blue    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义一个Color的枚举类型的变量来接收枚举的值</span>    <span class="token keyword">let</span> color<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>red    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>red<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>green<span class="token punctuation">,</span> Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// red=1的话，结果为1， 2， 3</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 小例子，枚举中的元素可以是中文的数据值，但是不推荐</span>    <span class="token keyword">enum</span> Gender<span class="token punctuation">{</span>        女<span class="token punctuation">,</span>        男    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Gender<span class="token punctuation">.</span>男<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==============='</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// any 类型</span>    <span class="token comment" spellcheck="true">/* let str: any = 100    str = '宇智波带土'    console.log(str) */</span>    <span class="token comment" spellcheck="true">// 当一个数组中要存储多个数据，个数不确定，类型不确定，此时也可以用any类型来定义数组</span>    <span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'宇智波带土，为心爱之人可以毁灭世界'</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这种情况下也没有错误的提示信息，any类型有优点，也有缺点</span>    <span class="token comment" spellcheck="true">// console.log(arr[0].split('') //报错</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'======================'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// void类型,在函数声明的时候，小括号后面使用:void，代表的是函数没有任何的返回值，return也不行,但是return可以返回null和undefined</span>    <span class="token keyword">function</span> <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'琳她曾经是我唯一的光明，失去了琳之后，我所看到的世界就全变成了漆黑的地狱，这个世界里全是灰烬没有希望，即使我顶着斑的名字走遍世界各地，但是看到的只是更加让我确信这一点，就算我拥有着写轮眼还是什么都看不到，什么都没有，我颠覆整个世界只为摆正你的倒影，我在地狱'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// return undefined</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定义void类型的变量，可以接受一个undefined的值，但是意义不大</span>    <span class="token keyword">let</span> vd<span class="token punctuation">:</span><span class="token keyword">void</span> <span class="token operator">=</span> undefined    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vd<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'====================='</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// object 类型</span>    <span class="token comment" spellcheck="true">// 定义一个函数，参数是object类型，返回值也是object类型</span>    <span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>object<span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            name<span class="token punctuation">:</span><span class="token string">'卡卡西'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">27</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(getObj({name:'佐助', sex:'男'}))</span>    <span class="token comment" spellcheck="true">// console.log(getObj('123')) // 报错</span>    <span class="token comment" spellcheck="true">// console.log(getObj(new String('123'))) // String&amp;nbsp;{'123'}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getObj</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// String</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'====================='</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 联合类型（Union Types）  表示取值可以为多种类型中的一种</span>    <span class="token comment" spellcheck="true">// 需求1：定义一个函数得到一个数字或者字符串值的字符串形式值</span>    <span class="token comment" spellcheck="true">/* function getString(str:number | string){        return str.toString()    }    console.log(getString('123')) */</span>    <span class="token comment" spellcheck="true">// 需求2：定义一个函数得到一个数字或字符串的长度</span>    <span class="token comment" spellcheck="true">// 类型断言：告诉编译器，我知道我自己是什么类型，也知道自己在干什么</span>    <span class="token comment" spellcheck="true">// 类型断言的语法方式1：&lt;类型>变量名</span>    <span class="token comment" spellcheck="true">// 类型断言的语法方式2：值 as 类型</span>    <span class="token keyword">function</span> <span class="token function">getString</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// return str.toString().length</span>        <span class="token comment" spellcheck="true">// 如果str本身就是string类型，那么是没有必要调用toString()方法的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// str.length存在吗？如果存在也就说明str是string类型的</span>            <span class="token comment" spellcheck="true">// return (&lt;string>str).length</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>str as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 此时说明str是number类型</span>            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">'0123456'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 类型推断：没有明确指定类型的时候会推测出一个类型</span>    <span class="token comment" spellcheck="true">/* let txt = 100 // number    // txt = '神威'    console.log(txt) */</span>    <span class="token keyword">let</span> txt2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// any类型</span>    txt2 <span class="token operator">=</span> <span class="token number">100</span>    txt2 <span class="token operator">=</span> <span class="token string">'小明'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>txt2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>总结： ts中变量一开始是什么类型，那么后期赋值的时候，只能用这个类型，是不允许用其他数据赋值给这个变量的</strong> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/24/hello-world/"/>
      <url>/2022/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
